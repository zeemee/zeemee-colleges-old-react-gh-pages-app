{"version":3,"sources":["components/CaseStudies.js","components/CollegePage.js","components/MoreInfoForm.js","components/Home.js","components/Partners.js","App.js","serviceWorker.js","index.js"],"names":["CaseStudies","props","state","error","isLoaded","items","url","process","fetch","then","res","json","result","setState","this","message","map","item","key","name","Object","keys","Component","CollegePage","page","match","params","id","MoreInfoForm","value","success","handleChange","bind","handleSubmit","event","target","requestOptions","method","headers","body","JSON","stringify","preventDefault","onSubmit","type","onChange","Home","Partners","partners","colleges","valign","college","App","to","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1c8d5e7f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass CaseStudies extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    const url = `${process.env.REACT_APP_BASE_API_URL}/case_studies.json`;\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.items\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <h1>Case Studies</h1>\n          <ul>\n            {items.map(item => (\n              <li key={item.name}>\n                {item.name}\n                <ul>\n                  {Object.keys(item).map(key => (\n                    <li key={key}>\n                      {key}: {item[key]}\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default CaseStudies;\n","import React, { Component } from \"react\";\n\nclass CollegePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      page: {}\n    };\n  }\n\n  componentDidMount() {\n    const url = `${process.env.REACT_APP_BASE_API_URL}/college_page.json?slug=${this.props.match.params.id}`;\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            page: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, page } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <h1>College Page</h1>\n          <h2>{this.props.match.params.id}</h2>\n          <ul>\n            {Object.keys(page).map(key => (\n              <li key={key}>\n                {key}: {page[key]}\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default CollegePage;\n","import React, { Component } from \"react\";\n\nclass MoreInfoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      error: null,\n      success: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    const url = `${process.env.REACT_APP_BASE_API_URL}/more_info.json`;\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name: this.state.value })\n    };\n\n    fetch(url, requestOptions)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            success: true\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            success: true,\n            error\n          });\n        }\n      )\n      //.then(response => response.json());\n      //.then(data => this.setState({ postId: data.id }));\n\n    //alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default MoreInfoForm;\n","import React, { Component } from \"react\";\nimport MoreInfoForm from './MoreInfoForm';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Home Page ZeeMee Colleges</h1>\n        <MoreInfoForm/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Partners extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      partners: [],\n      colleges: []\n    };\n  }\n\n  componentDidMount() {\n    const url = `${process.env.REACT_APP_BASE_API_URL}/partners.json`;\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            partners: result.items,\n            colleges: result.colleges\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, colleges, partners } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <h1>Partners Page</h1>\n          <table>\n            <tbody>\n              <tr valign=\"top\">\n                <td>\n                  <h2>Partners</h2>\n                  <ul>\n                    {partners.map(item => (\n                      <li key={item.name}>\n                        {item.name}\n                      </li>\n                    ))}\n                  </ul>\n                </td>\n                <td>\n                  <h2>Colleges</h2>\n                  <ul>\n                    {colleges.map(college => (\n                      <li key={college}>\n                        {college}\n                      </li>\n                    ))}\n                  </ul>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Partners;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CaseStudies from './components/CaseStudies';\nimport CollegePage from './components/CollegePage';\nimport Home from './components/Home';\nimport Partners from './components/Partners';\n\nexport default function App() {\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/partners\">Partners</Link>\n          </li>\n          <li>\n            <Link to=\"/caseStudies\">Case Studies</Link>\n          </li>\n          <li>Discover Feed</li>\n          <li>For Students</li>\n          <li>Get the App</li>\n          <li>Learn More</li>\n          <li>Get the App</li>\n          <li>\n            <Link to=\"/plnu\">College Page: PLNU</Link>\n          </li>\n        </ul>\n      </nav>\n      <Switch>\n        <Route path=\"/partners\">\n          <Partners />\n        </Route>\n        <Route path=\"/caseStudies\">\n          <CaseStudies />\n        </Route>\n        <Route path=\"/:id\" component={CollegePage}/>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'foundation-sites/dist/css/foundation.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}